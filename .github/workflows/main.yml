name: Verify Committer

on:
  push:
  pull_request:

jobs:
  verify-committer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      
      - name: Get pusher info
        id: pusher
        run: |
          PUSHER_LOGIN="${{ github.actor }}"
          PUSHER_EMAIL=$(gh api /users/$PUSHER_LOGIN --jq '.email // empty')
          
          # Si no hay email p√∫blico, usar el email del evento
          if [ -z "$PUSHER_EMAIL" ]; then
            PUSHER_EMAIL="${{ github.event.pusher.email }}"
          fi
          
          echo "pusher_email=$PUSHER_EMAIL" >> $GITHUB_OUTPUT
          echo "pusher_login=$PUSHER_LOGIN" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Verify commits
        id: verify
        run: |
          PUSHER_EMAIL="${{ steps.pusher.outputs.pusher_email }}"
          PUSHER_LOGIN="${{ steps.pusher.outputs.pusher_login }}"
          VERIFICATION_FAILED=false
          
          echo "Verifying commits for pusher: $PUSHER_LOGIN ($PUSHER_EMAIL)"
          
          # Solo verificar en push events, no en pull requests
          if [ "${{ github.event_name }}" != "push" ]; then
            echo "Skipping verification for pull request"
            exit 0
          fi
          
          # Obtener el rango de commits a verificar
          if [ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]; then
            # Primer push a la rama
            COMMIT_RANGE="${{ github.sha }}"
          else
            COMMIT_RANGE="${{ github.event.before }}..${{ github.sha }}"
          fi
          
          echo "Checking commit range: $COMMIT_RANGE"
          
          # Verificar cada commit
          for commit in $(git rev-list $COMMIT_RANGE 2>/dev/null || echo "${{ github.sha }}"); do
            COMMIT_AUTHOR_EMAIL=$(git show -s --format='%ae' $commit)
            COMMIT_COMMITTER_EMAIL=$(git show -s --format='%ce' $commit)
            COMMIT_MESSAGE=$(git show -s --format='%s' $commit)
            
            echo "Checking commit $commit:"
            echo "  Message: $COMMIT_MESSAGE"
            echo "  Author: $COMMIT_AUTHOR_EMAIL"
            echo "  Committer: $COMMIT_COMMITTER_EMAIL"
            echo "  Pusher: $PUSHER_EMAIL"
            
            # Verificar que el committer sea el mismo que el pusher
            if [ "$COMMIT_COMMITTER_EMAIL" != "$PUSHER_EMAIL" ] && [ -n "$PUSHER_EMAIL" ]; then
              echo "‚ùå ERROR: Commit $commit was not committed by pusher"
              echo "  Committer: $COMMIT_COMMITTER_EMAIL"
              echo "  Pusher: $PUSHER_EMAIL"
              VERIFICATION_FAILED=true
            else
              echo "‚úÖ Commit $commit verified"
            fi
          done
          
          if [ "$VERIFICATION_FAILED" = true ]; then
            echo "verification_failed=true" >> $GITHUB_OUTPUT
            exit 0  # No fallar aqu√≠, lo haremos en el siguiente step
          else
            echo "üéâ All commits verified successfully!"
            echo "verification_failed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Revert commits if verification failed
        if: steps.verify.outputs.verification_failed == 'true' && github.event_name == 'push'
        run: |
          echo "üîÑ Verification failed. Reverting commits..."
          
          # Obtener informaci√≥n del push
          BRANCH_NAME="${{ github.ref_name }}"
          BEFORE_SHA="${{ github.event.before }}"
          AFTER_SHA="${{ github.sha }}"
          
          echo "Branch: $BRANCH_NAME"
          echo "Reverting from $AFTER_SHA to $BEFORE_SHA"
          
          # Verificar que no sea el primer commit
          if [ "$BEFORE_SHA" != "0000000000000000000000000000000000000000" ]; then
            # Revertir al commit anterior
            echo "Resetting to previous commit: $BEFORE_SHA"
            git reset --hard $BEFORE_SHA
            
            # Forzar el push para revertir
            git push --force-with-lease origin $BRANCH_NAME
            
            echo "‚úÖ Commits reverted successfully"
          else
            echo "‚ö†Ô∏è Cannot revert first commit to branch. Deleting branch instead."
            git push origin --delete $BRANCH_NAME || echo "Could not delete branch"
          fi
          
          # Crear un issue para notificar el problema
          gh issue create \
            --title "üö® Commit Verification Failed - Auto Reverted" \
            --body "**Verification failed for commits in branch \`$BRANCH_NAME\`**

          **Details:**
          - Pusher: ${{ github.actor }}
          - Commits: \`$BEFORE_SHA..$AFTER_SHA\`
          - Reason: Committer email does not match pusher email
          
          **Action taken:** Commits have been automatically reverted.
          
          Please ensure your Git email configuration matches your GitHub account:
          \`\`\`bash
          git config user.email \"your-github-email@example.com\"
          \`\`\`
          
          Then recommit your changes with the correct email." \
            --assignee ${{ github.actor }} || echo "Could not create issue"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Fail workflow if verification failed
        if: steps.verify.outputs.verification_failed == 'true'
        run: |
          echo "‚ùå Workflow failed due to commit verification failure"
          exit 1